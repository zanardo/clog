#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import os.path
import subprocess
import uuid
import time
import json

def gethome():
	return os.path.expanduser('~')

def getscriptspath():
	return os.path.join(gethome(), '.clog-scripts')

def getqueuepath():
	return os.path.join(gethome(), '.clog-queue')

def createpaths():
	paths = [ getscriptspath(), getqueuepath() ]
	for p in paths:
		if not os.path.isdir(p):
			print("creating {}...").format(p)
			os.mkdir(p, 0700)

def runscript(script):
	print("running script {}").format(script)
	sp = os.path.join(getscriptspath(), script)
	if not os.path.isfile(sp):
		print("error: file {} not found!").format(sp)
		sys.exit(1)
	rid = str(uuid.uuid4())
	qlp = os.path.join(getqueuepath(), "{}.log".format(rid))
	with open(qlp, "w") as fp:
		st = time.time()
		ret = subprocess.call(sp, stdout=fp, stderr=subprocess.STDOUT)
		et = time.time()
	qcp = os.path.join(getqueuepath(), rid)
	with open(qcp + ".tmp", "w") as fp:
		json.dump(dict(start_time=st, end_time=et,
			status='OK' if ret == 0 else 'FAIL', script=script), fp)
	os.rename(qcp + '.tmp', qcp + '.meta')
	print("finished with id={}").format(rid)
	return rid

if __name__ == '__main__':

	createpaths()

	if len(sys.argv) > 1:
		script = sys.argv[1]
		runscript(script)
	else:
		print("Usage: {} <script>").format(sys.argv[0])
		sys.exit(1)
