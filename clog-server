#!/usr/bin/env python
# -*- coding: utf-8 -*-

from flask import Flask, request, render_template
from contextlib import contextmanager

import threading
import sqlite3
import os
import re
import datetime

app = Flask(__name__)
local = threading.local()
config = {}
config['dbname'] = 'clog.db'

def getdb():
    if not hasattr(local, 'db'):
        local.db = sqlite3.connect(config['dbname'],
                                   detect_types=sqlite3.PARSE_DECLTYPES)
        local.db.row_factory = sqlite3.Row
    return local.db

def getcursor():
    return getdb().cursor()

@contextmanager
def db_trans():
    dbh = getdb()
    c = dbh.cursor()
    try:
        yield c
    except:
        dbh.rollback()
        raise
    finally:
        dbh.commit()

@app.route('/jobs', methods=['GET', 'POST'])
def jobs():
	if request.method == 'POST':
		start_time = request.form['start_time']
		end_time = request.form['end_time']
		status = request.form['status']
		script = request.form['script']
		output = request.form['output']
		computername = request.form['computername']
		computeruser = request.form['username']
		ip = request.remote_addr
		rid = request.form['id']
		if not re.match(r'^[a-f0-9-]{36}$', rid):
			raise ValueError('invalid rid')
		with open(config['dbname'] + '.logs/' + rid, 'w') as fp:
			fp.write(output)
		with db_trans() as c:
			c.execute("insert into jobhistory (id, script, computername, "
				"ip, computeruser, datestarted, datefinished, "
				"status) values (:rid, :script, :computername, :ip, "
				":computeruser, :start_time, :end_time, :status)",
				locals())
		return 'ok'
	elif request.method == 'GET':
		c = getcursor()
		c.execute("""
			select j.computername
			, j.computeruser
			, j.script
			, ( select max(datestarted)
				from jobhistory
				where computername=j.computername
					and computeruser=j.computeruser
					and script=j.script
					and status='OK'
			  ) as lastsuccess
			, ( select max(datestarted)
				from jobhistory
				where computername=j.computername
					and computeruser=j.computeruser
					and script=j.script
					and status='FAIL'
			  ) as lastfail
			, ( select status
				from jobhistory
				where computername=j.computername
					and computeruser=j.computeruser
					and script=j.script
				order by datestarted desc
				limit 1
			  ) as laststatus
			, ( select datefinished-datestarted
				from jobhistory
				where computername=j.computername
					and computeruser=j.computeruser
					and script=j.script
				order by datestarted desc
				limit 1
			  ) as lastduration
			from jobhistory as j
			group by j.computername, j.computeruser, j.script
			order by j.computername, j.computeruser, j.script ;
		""")
		jobs = []
		for job in c:
			j = dict(job)
			if j['lastsuccess']:
				j['lastsuccess'] = datetime.datetime.fromtimestamp(j['lastsuccess']).strftime('%Y-%m-%d %H:%M:%S')
			else:
				j['lastsuccess'] = '-'
			if j['lastfail']:
				j['lastfail'] = datetime.datetime.fromtimestamp(j['lastfail']).strftime('%Y-%m-%d %H:%M:%S')
			else:
				j['lastfail'] = '-'
			jobs.append(j)
		return render_template('jobs.html', jobs=jobs)

if __name__ == '__main__':
	app.debug = True
	app.run(host='127.0.0.1', port=7890)