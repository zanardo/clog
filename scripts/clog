#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013-2016, Antonio Zanardo <zanardo@gmail.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR AND CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# This is clog client. See https://github.com/zanardo/clog for more details.
#

import sys
import os
import os.path
import subprocess
import uuid
import time
import json
import platform
import getpass
import argparse
import urllib
import urllib2
import logging

__VERSION__ = '0.5dev'

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s.%(msecs).03d %(levelname).3s | %(message)s',
    datefmt='%Y/%m/%d %H:%M:%S')
log = logging.getLogger(__name__)


# Convert string from "encoding" to UTF-8. The conversion do not
# breaks if an invalid character is processed.
def strenc(s, encoding='UTF-8'):
    return s.decode(encoding, 'replace').encode('utf-8')


# Get user home path.
def gethome():
    return os.path.expanduser('~')


# Get computer name (without domain).
def getcomputer():
    comp = platform.node()
    if comp is None or comp == '':
        raise ValueError('Invalid computer name')
    comp = comp.split('.')[0].lower()
    return strenc(comp)


# Get user name.
def getuser():
    return strenc(getpass.getuser().lower())


# Get default user clog scripts path.
def getscriptspath():
    return os.path.join(gethome(), '.clog-scripts')


# Get default user clog queue path.
def getqueuepath():
    return os.path.join(gethome(), '.clog-queue')


# Create clog queue and scripts path.
def createpaths(queue_path=None, scripts_path=None):
    if queue_path is None:
        queue_path = getqueuepath()
    if scripts_path is None:
        scripts_path = getscriptspath()
    paths = [queue_path, scripts_path]
    for p in paths:
        if not os.path.isdir(p):
            log.info("creating %s", p)
            os.mkdir(p, 0700)


# Run a script (clog run).
def runscript(script, encoding='UTF-8', scripts_path=None, queue_path=None):
    log.info('starting script "%s"', script)
    script_path = os.path.join(scripts_path, script)
    if not os.path.isfile(script_path):
        log.critical("file %s not found!", script_path)
        sys.exit(1)
    queue_id = str(uuid.uuid4())
    queue_base_path = os.path.join(queue_path, queue_id)
    with open(queue_base_path + '.out', "w") as fp:
        start_time = time.time()
        s = subprocess.Popen(
            script_path, stderr=subprocess.STDOUT,
            bufsize=4096, stdout=subprocess.PIPE)
        return_code = None
        while True:
            chunk = strenc(s.stdout.read(4096), encoding=encoding)
            fp.write(chunk)
            sys.stdout.write(chunk)
            return_code = s.poll()
            if return_code is not None:
                break
        end_time = time.time()
        fp.flush()
    duration = end_time - start_time
    status = 'ok' if return_code == 0 else 'fail'
    with open(queue_base_path + ".tmp", "w") as fp:
        json.dump(dict(start_time=start_time, end_time=end_time,
                       duration=duration, status=status, script=script,
                       computername=getcomputer(), username=getuser()), fp)
        fp.flush()
    os.rename(queue_base_path + '.tmp', queue_base_path + '.meta')
    log.info('finished script "%s" on %0.3fsec, status %s',
             script, duration, status)
    log.info("queued with identifier %s", queue_id)
    return queue_id


# Send queue (clog send-queue).
def runqueue(server, timeout=30, queue_path=None, max_size=1048576):
    log.info("starting queue dispatch to %s", server)
    os.chdir(queue_path)
    for queue_file in os.listdir('.'):
        if len(queue_file) == 41 and queue_file.endswith('.meta'):
            queue_id = queue_file[:36]
            log.info("sending job %s", queue_id)
            with open(queue_file, 'r') as fp:
                meta = json.load(fp)
            with open(queue_id + '.out', 'r') as fp:
                # If output file is bigger than max_size, we will read only
                # max_size bytes from the bottom.
                file_size = os.path.getsize(queue_id + '.out')
                if file_size > max_size:
                    log.info("output too large, stripping %d bytes",
                             file_size-max_size)
                    fp.seek(file_size - max_size)
                    meta['output'] = fp.read(max_size)
                else:
                    meta['output'] = fp.read()
            meta['id'] = queue_id
            data = urllib.urlencode(meta)
            req = urllib2.Request(server, data)
            req.add_header(
                'Content-Type',
                'application/x-www-form-urlencoded; charset=utf-8')
            try:
                res = urllib2.urlopen(req, None, timeout=timeout).read()
            except Exception, ex:
                log.error("error sending queue:")
                raise
            else:
                if res == 'ok':
                    os.unlink("{}.out".format(queue_id))
                    os.unlink("{}.meta".format(queue_id))
                else:
                    log.error("server response: %s", res)
    log.info("finished queue dispatch")


if __name__ == '__main__':

    parser = argparse.ArgumentParser()

    # Global arguments.
    parser.add_argument(
        '-q', '--queue-path',
        help='queue path (default: $HOME/.clog-queue',
        default=getqueuepath(), dest='queue_path')
    parser.add_argument(
        '-s', '--scripts-path',
        help='scripts path (default: $HOME/.clog-scripts',
        default=getscriptspath(), dest='scripts_path')

    subparsers = parser.add_subparsers(help='sub-commands help', dest='sub')

    # clog run
    parser_run = subparsers.add_parser('run', help='run scripts')
    parser_run.add_argument(
        '-e', '--encoding', default='UTF-8',
        help='charset for script output (default: UTF-8)')
    parser_run.add_argument('script', help='script name')

    # clog send-queue
    parser_queue = subparsers.add_parser(
        'send-queue', help='send scripts output')
    parser_queue.add_argument('server_url', help='server url')
    parser_queue.add_argument(
        '-t', '--timeout', help='timeout in seconds',
        default=30, type=int)
    parser_queue.add_argument(
        '-z', '--max-size', help='output max size in bytes',
        default=1048576, type=int, dest='max_size')

    args = parser.parse_args()

    # Create necessary paths if they don't exist.
    createpaths(scripts_path=args.scripts_path, queue_path=args.queue_path)

    if args.sub == 'run':
        runscript(args.script, encoding=args.encoding,
                  queue_path=args.queue_path,
                  scripts_path=args.scripts_path)
    elif args.sub == 'send-queue':
        runqueue(args.server_url, timeout=args.timeout,
                 queue_path=args.queue_path,
                 max_size=args.max_size)
